//if (test2(encipher(data,input,key1,key2,key3),data))
				//	out.println("Success");
				//else
				//	out.println("Failure");
				//decipher(encipher(data,input,key1,key2,key3));
//int key5=key1^key2;		//used to hide key1
			//key3=new Integer((key1^key2)^key3).byteValue(); //used to hide key3
			//outputWriter.writeInt((int)key2); //writes key2 to output file
			//outputWriter.writeInt(key5);		//writes hidden key1 to output
			//outputWriter.writeInt((int)key3);	//writes hidden key3 to output
/*public static boolean test2(File output,BufferedReader input)
	{
		ArrayList<Integer> buff=new ArrayList<Integer>(),buff2=new ArrayList<Integer>();
		BufferedReader outputTester;
		byte key1,key2;
		try
		{
			outputTester=new BufferedReader(new InputStreamReader(new FileInputStream(output)));
		}
		catch(FileNotFoundException e)
		{
			out.println("This should never happen...");
			return false;
		}
		try
		{
			key2=new Integer(outputTester.read()).byteValue();
			key1=new Integer(outputTester.read()^key2).byteValue();
			//int key4=new Integer((key1^key2)^outputTester.read()).byteValue();
			outputTester.read();
			while(true)
			{
				buff.add(input.read());
				if (buff.get(buff.size()-1)==-1)
				{
					buff.remove(buff.size()-1);
					break;
				}
			}
			while(true)
			{
				buff2.add(outputTester.read());
				if (buff2.get(buff2.size()-1)==-1)
				{
					buff2.remove(buff2.size()-1);
					break;
				}
			}
			for(int x =0;x<buff2.size()&&x<buff.size();x++)
			{
				int fixer = buff2.get(x) ^ buff.get(x);
				fixer=~fixer;
				fixer=fixer ^ key1;
				if(fixer!= buff.get(x))
					return false;
			}
		}
		catch(IOException e)
		{
			out.println("ERROR");
			return false;
		}
		return true;
	}*/
//byte fixer = new Integer(buff.get(x)^key4).byteValue();
				//fixer=new Integer(~fixer).byteValue();
				//fixer=new Integer(fixer^key1).byteValue();
				//outputWriter.writeInt(fixer^key1);
BitSet.valueOf(new byte[]{Byte.parseByte(fix.nextLine())});
public static File encipher(BufferedReader data,String input,Bit[] key1,Bit[] key2,Bit[] key3)
	{
		ArrayList<BitSet> buff=new ArrayList<>();
		File output = new File(input); //input == name of file
		DataOutputStream outputWriter;
		try
		{
			outputWriter = new DataOutputStream(new FileOutputStream(output));
		}
		catch(FileNotFoundException e)
		{
			return null;
		} 
		try
		{
			BitSet key4=key3;	//convenience
			key4.or(key2);		//"	"
			while(true)
			{
				BitSet key5=(BitSet)key1.clone();
				key5.xor(key2);											//used to hide key1
				key3.xor(key5);											//used to hide key3
				outputWriter.writeByte((int)(key2.toLongArray())[0]);	//writes key2 to output
				outputWriter.writeByte((int)(key1.toLongArray())[0]);	//writes hidden key1 to output
				outputWriter.writeByte((int)(key3.toLongArray())[0]);	//writes hidden key3 to output	
				break;
			}
			while(true)
			{
				buff.add(BitSet.valueOf(new byte[]{new Integer(data.read()).byteValue()}));
				if (buff.get(buff.size()-1)==(BitSet.valueOf(new byte[]{new Integer(-1).byteValue()})));
				{
					buff.remove(buff.size()-1);
					break;
				}
			}

			for(BitSet x:buff)
			{
				x.xor(key1);
				x.and(key4);	
				outputWriter.writeByte((int)(x.toLongArray())[0]);
			}
		}
		catch(IOException e)
		{
			return output;
		}
		return output;
	}
	
	public static File decipher(File input)
	{
		File output=new File(input.getPath()+input.getName().substring(0,input.getName().lastIndexOf("."))+"Decrypted");
		ArrayList<BitSet> buff=new ArrayList<>();
		BufferedReader outputTester;
		DataOutputStream outputWriter;
		BitSet key1=new BitSet(8),key2=new BitSet(8),key4=new BitSet(8);
		try
		{
			outputTester=new BufferedReader(new InputStreamReader(new FileInputStream(input)));
			outputWriter=new DataOutputStream(new FileOutputStream(output));
		}
		catch(FileNotFoundException e)
		{
			out.println("This should never happen...");
			return null;
		}
		try
		{
			key2=BitSet.valueOf(new byte[] {new Integer(outputTester.read()).byteValue()});
			key1=BitSet.valueOf(new byte[] {new Integer(outputTester.read()).byteValue()});
			key4=BitSet.valueOf(new byte[] {new Integer(outputTester.read()).byteValue()});
			key4.xor(key1);
			key1.xor(key2);
			key4.or(key2);
			while(true)
			{
				buff.add(BitSet.valueOf(new byte[]{new Integer(outputTester.read()).byteValue()}));
				if (buff.get(buff.size()-1)==(BitSet.valueOf(new byte[]{new Integer(-1).byteValue()})));
				{
					buff.remove(buff.size()-1);
					break;
				}
			}
			for(BitSet x:buff)
			{
				BitSet fix=(BitSet)x.clone();
				BitSet fix2=(BitSet)x.clone();
				int inc=0;
				while(inc<x.size())
				{
					if(!x.get(inc) && !fix.get(inc))
						fix2.set(inc,false);
					fix2.set(inc,!(x.get(inc)^fix.get(inc)));
					inc++;
				}
				outputWriter.writeByte((int)(x.toLongArray())[0]);
			}
		}
		catch(IOException e)
		{
			return output;
		}
		return output;
	}